{"version":3,"sources":["components/GameContainer/GameInit/GameInit.module.css","components/GameMenu/GameMenu.module.css","components/Game/Game.module.css","components/Board/Board.module.css","components/GameInfo/GameInfo.module.css","components/Cell/Cell.module.css","images/tic-tac-toe.svg","components/GameMenu/GameMenu.jsx","components/GameContainer/GameInit/PlayerName/PlayerName.jsx","components/GameContainer/GameInit/GameInit.jsx","components/Cell/Cell.js","components/Board/Board.js","components/GameInfo/GameInfo.jsx","components/Game/Game.jsx","components/GameContainer/GameContainer.jsx","components/common/botLogic.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","GameMenu","props","className","styles","wrapper","src","ticTacToe","image","alt","linkWrapper","to","link","PlayerName","htmlFor","id","title","type","placeholder","onChange","ev","handleSetName","GameInit","initialState","newState","mode","useState","names","setName","playerItem","setPlayerItem","value","currentTarget","prevState","form","blockDescription","radioWrapper","radio","name","button","onClick","firstPlayer","item","wins","secondPlayer","initGame","Cell","makeMove","index","Board","useEffect","moveNumber","gameStatus","makeBotMove","renderCell","cells","row","GameInfo","players","bold","Game","status","currentItem","buttonWrapper","playAgain","withRouter","match","params","gamestatus","setCell","setPlayers","setMoveNumber","setGameStatus","winOptions","newCells","splice","i","a","b","c","length","checkWin","indexOf","botMove","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.9477c93a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameInit_wrapper__2UCS-\",\"form\":\"GameInit_form__fDtu-\",\"blockDescription\":\"GameInit_blockDescription__30Z_k\",\"radioWrapper\":\"GameInit_radioWrapper__1U8GU\",\"radio\":\"GameInit_radio__rAjWH\",\"button\":\"GameInit_button__3dcb0\",\"link\":\"GameInit_link__2tNVg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameMenu_wrapper__6O_15\",\"linkWrapper\":\"GameMenu_linkWrapper__2GzF2\",\"image\":\"GameMenu_image__1J44p\",\"link\":\"GameMenu_link__ZUTmx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__24xsQ\",\"status\":\"Game_status__36FjT\",\"buttonWrapper\":\"Game_buttonWrapper__38zdo\",\"link\":\"Game_link__380BN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Board_wrapper__3qSjZ\",\"row\":\"Board_row__3Pzi1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameInfo_wrapper__3eY1c\",\"title\":\"GameInfo_title__2WMLo\",\"bold\":\"GameInfo_bold__1T_o_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Cell_wrapper__3KVQY\"};","export default __webpack_public_path__ + \"static/media/tic-tac-toe.ef367f47.svg\";","import React from 'react';\r\nimport styles from './GameMenu.module.css'\r\nimport ticTacToe from './../../images/tic-tac-toe.svg'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst GameMenu = (props) => {\r\n    return (\r\n        <article className={styles.wrapper}>\r\n            <img src={ticTacToe} className={styles.image} alt=\"tic-tac-toe game\"/>\r\n            <div className={styles.linkWrapper}>\r\n                <NavLink to='/game/pvp' className={styles.link}>player vs player</NavLink>\r\n                <NavLink to='/game/pvb' className={styles.link}>player vs bot</NavLink>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default GameMenu","import React from 'react';\r\n\r\n\r\nconst PlayerName = (props) => {\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id}>{props.title}</label>\r\n            <input id={props.id}\r\n                   type='text'\r\n                   placeholder='Name'\r\n                   onChange={ev => props.handleSetName(ev, props.id)}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlayerName","import React, {useState} from 'react';\r\nimport styles from \"./GameInit.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PlayerName from \"./PlayerName/PlayerName\";\r\n\r\n\r\nconst GameInit = (props) => {\r\n    let initialState;\r\n    let newState;\r\n\r\n    if (props.mode === 'pvp') {\r\n        initialState = ['Player 1', 'Player 2']\r\n    } else {\r\n        initialState = 'Player'\r\n    }\r\n    let [names, setName] = useState(initialState);\r\n    let [playerItem, setPlayerItem] = useState('X');\r\n\r\n    let setInit = () => {\r\n        newState = {\r\n            firstPlayer: {name: names || 'Player', item: playerItem, wins: 0,},\r\n            secondPlayer: {name: 'Bot', item: playerItem === 'X' ? 'O' : 'X', wins: 0,}\r\n        };\r\n        if (props.mode === 'pvp') {\r\n            newState = {\r\n                firstPlayer: {...newState.firstPlayer, name: names[0]},\r\n                secondPlayer: {...newState.secondPlayer, name: names[1]}\r\n            }\r\n        }\r\n        props.initGame(newState)\r\n    }\r\n\r\n    let handleSetName = (ev, id) => {\r\n        let value = ev.currentTarget.value;\r\n\r\n        if (props.mode === 'pvp') {\r\n            if (id === 'firstName') {\r\n                setName(prevState => {\r\n                    prevState[0] = value;\r\n                    return [...prevState]\r\n                })\r\n            } else {\r\n                setName(prevState => {\r\n                    prevState[1] = value;\r\n                    return [...prevState]\r\n                })\r\n            }\r\n        } else {\r\n            setName(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.form}>\r\n                {props.mode !== 'pvp' ? <PlayerName id={'name'}\r\n                                                    title={'Player name'}\r\n                                                    handleSetName={handleSetName}/>\r\n                    :\r\n                    <>\r\n                        <PlayerName id={'firstName'} title={'First player name'} handleSetName={handleSetName}/>\r\n                        <PlayerName id={'secondName'} title={'Second player name'} handleSetName={handleSetName}/>\r\n                    </>\r\n                }\r\n\r\n                <div>\r\n                    <p className={styles.blockDescription}>First player plays for</p>\r\n                    <div className={styles.radioWrapper}>\r\n                        <div className={styles.radio}>\r\n                            <input type='radio'\r\n                                   id='xItem'\r\n                                   name=\"drone\"\r\n                                   value=\"X\"\r\n                                   onChange={(ev) => {\r\n                                       setPlayerItem(ev.currentTarget.value)\r\n                                   }}/>\r\n                            <label htmlFor=\"xItem\">X</label>\r\n                        </div>\r\n                        <div className={styles.radio}>\r\n                            <input type='radio'\r\n                                   id='oItem'\r\n                                   name=\"drone\"\r\n                                   value=\"O\"\r\n                                   onChange={(ev) => {\r\n                                       setPlayerItem(ev.currentTarget.value)\r\n                                   }}/>\r\n                            <label htmlFor=\"oItem\">O</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className={styles.button} onClick={() => {\r\n                    setInit()\r\n                }}>Submit\r\n                </button>\r\n\r\n            </div>\r\n            <NavLink to='/' className={styles.link}>Back to menu</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameInit","import React from 'react';\r\nimport styles from './Cell.module.css'\r\n\r\n\r\nconst Cell = (props) => {\r\n    return (\r\n        <button className={styles.wrapper}\r\n                onClick={() => {\r\n                    props.makeMove(props.index)\r\n                }}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Cell","import React, {useEffect} from 'react';\r\nimport styles from './Board.module.css'\r\nimport Cell from \"../Cell/Cell\";\r\n\r\n\r\nconst Board = (props) => {\r\n\r\n    useEffect(() => {\r\n        if (props.moveNumber % 2 === 0 && props.mode === 'pvb' && props.gameStatus === 'during') {\r\n            props.makeBotMove()\r\n        }\r\n    }, [props.gameStatus, props.moveNumber])\r\n\r\n    const renderCell = (index) => {\r\n        return <Cell key={index} index={index} value={props.cells[index]} makeMove={props.makeMove} />\r\n    }\r\n\r\n    return (\r\n        <section className={styles.wrapper}>\r\n            <div className={styles.row}>\r\n                {renderCell(0)}\r\n                {renderCell(1)}\r\n                {renderCell(2)}\r\n            </div>\r\n            <div className={styles.row}>\r\n                {renderCell(3)}\r\n                {renderCell(4)}\r\n                {renderCell(5)}\r\n            </div>\r\n            <div className={styles.row}>\r\n                {renderCell(6)}\r\n                {renderCell(7)}\r\n                {renderCell(8)}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Board","import React from 'react';\r\nimport styles from './GameInfo.module.css'\r\n\r\n\r\nconst GameInfo = (props) => {\r\n    let firstPlayer = props.players.firstPlayer;\r\n    let secondPlayer = props.players.secondPlayer;\r\n\r\n    return (\r\n        <aside className={styles.wrapper}>\r\n            <h2 className={styles.title}>Score:</h2>\r\n            <p>{firstPlayer.name} ({firstPlayer.item}): <span className={styles.bold}>{firstPlayer.wins}</span></p>\r\n            <p>{secondPlayer.name} ({secondPlayer.item}): <span className={styles.bold}>{secondPlayer.wins}</span></p>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default GameInfo","import React from 'react';\r\nimport styles from './Game.module.css'\r\nimport Board from \"../Board/Board\";\r\nimport GameInfo from \"../GameInfo/GameInfo\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Game = (props) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <p className={styles.status}>Game status: {props.gameStatus} <br/>\r\n                {props.gameStatus !== 'during' ? null : `'${props.currentItem}' moves, ${props.moveNumber} move`}\r\n            </p>\r\n            {props.gameStatus !== 'during' ? (\r\n                    <div className={styles.buttonWrapper}>\r\n                        <button onClick={() => props.playAgain()}>Play again</button>\r\n                    </div>\r\n                )\r\n                : <>\r\n                    <Board mode={props.mode}\r\n                           moveNumber={props.moveNumber}\r\n                           gameStatus={props.gameStatus}\r\n                           cells={props.cells}\r\n                           makeMove={props.makeMove}\r\n                           makeBotMove={props.makeBotMove}/>\r\n                </>\r\n            }\r\n            <GameInfo players={props.players}/>\r\n            <NavLink to='/' className={styles.link}>Back to menu</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","import React, {useState} from 'react';\r\nimport GameInit from \"./GameInit/GameInit\";\r\nimport Game from \"../Game/Game\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {botMove} from \"../common/botLogic\";\r\n\r\n\r\nconst GameContainer = (props) => {\r\n    let mode = props.match.params.gamestatus || 'pvp';\r\n    let [cells, setCell] = useState([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\r\n    let [players, setPlayers] = useState({\r\n        firstPlayer: {name: null, item: null, wins: 0},\r\n        secondPlayer: {name: null, item: null, wins: 0}\r\n    })\r\n    let [moveNumber, setMoveNumber] = useState(1);\r\n    let [gameStatus, setGameStatus] = useState('during');\r\n    let currentItem = moveNumber % 2 ? players.firstPlayer.item : players.secondPlayer.item;\r\n    let winOptions = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    const checkWin = (newCells) => {\r\n        for (let i = 0; i < winOptions.length; i++) {\r\n            let [a, b, c] = winOptions[i];\r\n            if (newCells[a] !== ' ' && (newCells[a] === newCells[b]) && (newCells[a] === newCells[c])) {\r\n                setGameStatus(`${newCells[a]} wins`);\r\n                setPlayers(prevState => {\r\n                    let newState;\r\n                    if (players.firstPlayer.item === newCells[a]) {\r\n                        newState = {\r\n                            ...prevState,\r\n                            firstPlayer: {...prevState.firstPlayer, wins: prevState.firstPlayer.wins + 1},\r\n                        }\r\n                        return newState;\r\n                    } else {\r\n                        newState = {\r\n                            ...prevState,\r\n                            secondPlayer: {...prevState.secondPlayer, wins: prevState.secondPlayer.wins + 1}\r\n                        }\r\n                        return newState\r\n                    }\r\n                })\r\n                return true\r\n            }\r\n        }\r\n        if (moveNumber === 9) {\r\n            setGameStatus('draw');\r\n        }\r\n        setMoveNumber(moveNumber + 1)\r\n    }\r\n\r\n    const makeMove = (index) => {\r\n        if (cells[index] === ' ') {\r\n            let newCells = [...cells];\r\n            newCells.splice(index, 1, currentItem)\r\n            setCell(newCells)\r\n            checkWin(newCells)\r\n        }\r\n    }\r\n\r\n    const makeBotMove = () => {\r\n        let index = botMove(cells, winOptions, players);\r\n        makeMove(index);\r\n    }\r\n\r\n    const playAgain = () => {\r\n        setCell([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\r\n        setMoveNumber(1);\r\n        setGameStatus('during')\r\n    }\r\n\r\n    if (!players.firstPlayer.name) {\r\n        return <GameInit initGame={setPlayers} mode={mode} />\r\n    }\r\n\r\n    return <Game mode={mode}\r\n                 gameStatus={gameStatus}\r\n                 players={players}\r\n                 cells={cells}\r\n                 currentItem={currentItem}\r\n                 moveNumber={moveNumber}\r\n                 makeMove={makeMove}\r\n                 makeBotMove={makeBotMove}\r\n                 playAgain={playAgain}/>\r\n}\r\n\r\nexport default withRouter(GameContainer)\r\n","export const botMove = (cells, winOptions, players) => {\r\n\r\n    for (let i = 0; i <winOptions.length; i++) {\r\n        let [a, b, c] = winOptions[i];\r\n        if (cells[a] === ' ' || cells[a] === players.secondPlayer.item) {\r\n            if (cells[b] === ' ' || cells[b] === players.secondPlayer.item) {\r\n                if (cells[c] === ' ' || cells[c] === players.secondPlayer.item) {\r\n                    if (cells[a] === ' ') {\r\n                        return a\r\n                    } else if (cells[b] === ' ') {\r\n                        return b\r\n                    } else {\r\n                        return c\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return cells.indexOf(' ')\r\n}","import React from 'react';\nimport './App.css';\nimport GameMenu from \"./components/GameMenu/GameMenu\";\nimport {Route} from \"react-router-dom\";\nimport GameContainer from \"./components/GameContainer/GameContainer\";\n\n\nconst App = (props) => {\n    return (\n        <div className=\"wrapper\">\n            <Route exact path=\"/\" render={() => <GameMenu />} />\n            <Route path=\"/game/:gamestatus?\" render={() => <GameContainer /> } />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/tic-tac-toe-game\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}